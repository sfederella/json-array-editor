{"version":3,"sources":["services/backClient.js","App.js","serviceWorker.js","index.js"],"names":["backClient","putJsonArrayAt","json","index","next","fetch","method","body","JSON","stringify","headers","then","response","a","getJsonArrayAt","getSize","lightGreen","contrastText","theme","createMuiTheme","palette","primary","App","setEditorRef","instance","editor","handleOnNext","state","currentIndex","res","success","localStorage","setItem","setState","alert","error","handleOnPrev","handleKeyPress","e","key","parseInt","target","value","size","inputIndex","r","getItem","prevProps","prevState","this","jsonEditor","set","className","MuiThemeProvider","Grid","container","direction","justify","alignItems","spacing","item","Paper","Typography","variant","component","TextField","id","onChange","onBlur","onKeyPress","type","margin","ref","ace","mode","Button","color","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3e32058.chunk.js","sourcesContent":["const backClient = {\n\tputJsonArrayAt: (json, index, next) => {\n\t\tfetch('http://localhost:5000/api/jsonarray/' + index, {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(json),\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\n\t\t\t}\n\t\t})\n\t\t.then( async response => {\n\t\t\tvar json = await response.json();\n\t\t\tnext(json);\n\t\t});\n\t},\n\tgetJsonArrayAt: (index, next) => {\n\t\tfetch('http://localhost:5000/api/jsonarray/' + index)\n\t\t.then( async response => {\n\t\t\tvar json = await response.json();\n\t\t\tnext(json);\n\t\t});\n\t},\n\tgetSize: (next) => {\n\t\tfetch('http://localhost:5000/api/size')\n\t\t.then( async response => {\n\t\t\tvar json = await response.json();\n\t\t\tnext(json);\n\t\t});\n\t}\n}\n\nexport default backClient;","import React from 'react';\nimport './App.css';\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\nimport ace from 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\nimport {Button, Grid} from '@material-ui/core';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport {lightGreen} from '@material-ui/core/colors';\nimport backClient from './services/backClient';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nlightGreen.contrastText = '#fff';\nconst theme = createMuiTheme({\n  palette: {\n    primary: lightGreen,\n  }\n});\n\nclass App extends React.Component {\n  setEditorRef = instance => this.editor = instance;\n\n  constructor() {\n    super();\n    this.state = {\n      size: 0,\n      currentIndex: 0,\n      inputIndex: 0,\n      json: {}\n    };\n  }\n\n  componentDidMount() {\n    backClient.getSize(r => {\n      if (r.size >= 1) {\n        var currentIndex = parseInt(localStorage.getItem('currentIndex'));\n        if (!currentIndex || currentIndex > r.size) currentIndex = 1;\n        this.setState({\n          size: r.size,\n          currentIndex,\n          inputIndex: currentIndex\n        });\n      } else {\n        alert(\"The json array must have al least one element.\")\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      backClient.getJsonArrayAt(this.state.currentIndex - 1, (json) => {\n        if (json.error) {\n          alert('Error: ' + json.error)\n        } else {\n          this.setState({\n            json,\n            inputIndex: this.state.currentIndex\n          });\n          this.editor.jsonEditor.set(json);\n        }\n      });\n    }\n  }\n\n  handleOnNext = () => {\n    backClient.putJsonArrayAt(this.state.json, this.state.currentIndex- 1, res => {\n      if(res.success) {\n        const currentIndex = this.state.currentIndex + 1;\n        localStorage.setItem('currentIndex', currentIndex);\n        this.setState({currentIndex});\n      } else {\n        alert('Error: ' + res.error);\n      }\n    });\n  }\n\n  handleOnPrev = () => {\n    backClient.putJsonArrayAt(this.state.json, this.state.currentIndex-1, res => {\n      if(res.success) {\n        const currentIndex = this.state.currentIndex - 1;\n        localStorage.setItem('currentIndex', currentIndex);\n        this.setState({currentIndex});\n      } else {\n        alert('Error: ' + res.error);\n      }\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter'){\n      this.setState({currentIndex: parseInt(e.target.value)});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MuiThemeProvider theme={theme}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={1}\n            >\n              <Grid item>\n                <Paper className=\"pageIndex\">\n                  <Typography variant=\"h5\" component=\"h2\">\n                    <TextField\n                      id=\"currentIndexInput\"\n                      value={this.state.inputIndex}\n                      onChange={e => this.setState({inputIndex: e.target.value})}\n                      onBlur={e => this.setState({currentIndex: parseInt(e.target.value)})}\n                      onKeyPress={this.handleKeyPress}\n                      type=\"text\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                    /> / {this.state.size}\n                  </Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n            <Editor\n              ref={this.setEditorRef}\n              value={this.state.json}\n              onChange={(json) => this.setState({json})}\n              ace={ace}\n              mode='code'\n              theme=\"ace/theme/github\"\n            />\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={2}\n            >\n              {\n                this.state.currentIndex > 1 &&\n                <Grid item>\n                  <Button variant=\"contained\" color=\"secondary\" size=\"large\" onClick={this.handleOnPrev}>\n                    Previous\n                  </Button>\n                </Grid>\n              }\n              <Grid item>\n                <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.handleOnNext}>\n                  Next\n                </Button>\n              </Grid>\n            </Grid>\n          </MuiThemeProvider>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}